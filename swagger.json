{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "the purpose of this application is to provide an application\nthat is using plain go code to define an API",
    "title": "Gravity Node API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "venlab.dev",
      "url": "https://venlab.dev",
      "email": "shamil@venlab.dev"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "1.0"
  },
  "host": "node.gravityhub.org",
  "basePath": "/",
  "paths": {
    "/common/stats": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all gravity common stats",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Common"
        ],
        "summary": "Returns gravity node common statistics",
        "operationId": "getCommonStats",
        "responses": {
          "200": {
            "description": "CommonStats",
            "schema": {
              "$ref": "#/definitions/CommonStats"
            }
          }
        }
      }
    },
    "/data/datafeeds/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Data feeds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Datafeeds"
        ],
        "summary": "Returns available data feeds",
        "operationId": "getAvailableDataFeeds",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Extractor",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extractor"
              }
            }
          }
        }
      }
    },
    "/nebulas/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity nebulas",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Nebulas"
        ],
        "summary": "Returns all available gravity nebulas",
        "operationId": "getAllNebulas",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Nebula",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Nebula"
              }
            }
          }
        }
      }
    },
    "/nebulas/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact Nebula by address",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Nebulas"
        ],
        "operationId": "getExactNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Nebula",
            "schema": {
              "$ref": "#/definitions/Nebula"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/nodes/actions/history": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all gravity node mockup actions history list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Nodes"
        ],
        "summary": "Returns gravity node mockup actions history",
        "operationId": "getNodeActionHistory",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "NodeHistoryRecord",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeHistoryRecord"
              }
            }
          }
        }
      }
    },
    "/nodes/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity nodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Nodes"
        ],
        "summary": "Returns all available gravity nodes",
        "operationId": "getAllNodes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          }
        }
      }
    },
    "/nodes/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact node by name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "getExactNode",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/nodes/rewards/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all gravity node mockup rewards list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Nodes"
        ],
        "summary": "Returns gravity node mockup rewards",
        "operationId": "getNodeRewards",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "NodeReward",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeReward"
              }
            }
          }
        }
      }
    },
    "/transactions/add-nebula/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity add-nebula transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "AddNebula"
        ],
        "summary": "Returns all available gravity add-nebula transactions",
        "operationId": "getAllAddNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AddNebulaTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddNebulaTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/add-nebula/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact add-nebula by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "AddNebula"
        ],
        "operationId": "getExactAddNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AddNebulaTransaction",
            "schema": {
              "$ref": "#/definitions/AddNebulaTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/add-oracle-in-nebula/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity add-oracle-in-nebula transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "AddOracleInNebula"
        ],
        "summary": "Returns all available gravity add-oracle-in-nebula transactions",
        "operationId": "getAllAddOracleInNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AddOracleInNebulaTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddOracleInNebulaTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/add-oracle-in-nebula/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact add-oracle-in-nebula by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "AddOracleInNebula"
        ],
        "operationId": "getExactAddOracleInNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AddOracleInNebulaTransaction",
            "schema": {
              "$ref": "#/definitions/AddOracleInNebulaTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/add-oracle/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity add-oracle transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "AddOracle"
        ],
        "summary": "Returns all available gravity add-oracle transactions",
        "operationId": "getAllAddOracle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AddOracleTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddOracleTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/add-oracle/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact add-oracle by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "AddOracle"
        ],
        "operationId": "getExactAddOracle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AddOracleTransaction",
            "schema": {
              "$ref": "#/definitions/AddOracleTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Returns all available gravity transactions",
        "operationId": "getAllTransactions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          }
        }
      }
    },
    "/transactions/approve-last-round/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity approve-last-round transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "ApproveLastRound"
        ],
        "summary": "Returns all available gravity approve-last-round transactions",
        "operationId": "getAllApproveLastRound",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ApproveLastRoundTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApproveLastRoundTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/approve-last-round/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact approve-last-round by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "ApproveLastRound"
        ],
        "operationId": "getExactApproveLastRound",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ApproveLastRoundTransaction",
            "schema": {
              "$ref": "#/definitions/ApproveLastRoundTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/commit/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity commit transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Commit"
        ],
        "summary": "Returns all available gravity commit transactions",
        "operationId": "getAllCommit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "CommitTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommitTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/commit/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact commit by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Commit"
        ],
        "operationId": "getExactCommit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "CommitTransaction",
            "schema": {
              "$ref": "#/definitions/CommitTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/drop-nebula/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity drop-nebula transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "DropNebula"
        ],
        "summary": "Returns all available gravity drop-nebula transactions",
        "operationId": "getAllDropNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "DropNebulaTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DropNebulaTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/drop-nebula/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact drop-nebula by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "DropNebula"
        ],
        "operationId": "getExactDropNebula",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "DropNebulaTransaction",
            "schema": {
              "$ref": "#/definitions/DropNebulaTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact transaction by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Transactions"
        ],
        "operationId": "getExactTransaction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/new-round/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity new-round transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "NewRound"
        ],
        "summary": "Returns all available gravity new-round transactions",
        "operationId": "getAllNewRound",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "NewRoundTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewRoundTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/new-round/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact new-round by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "NewRound"
        ],
        "operationId": "getExactNewRound",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "NewRoundTransaction",
            "schema": {
              "$ref": "#/definitions/NewRoundTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/result/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity result transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Result"
        ],
        "summary": "Returns all available gravity result transactions",
        "operationId": "getAllResult",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ResultTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResultTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/result/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact result by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Result"
        ],
        "operationId": "getExactResult",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ResultTransaction",
            "schema": {
              "$ref": "#/definitions/ResultTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/reveal/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity reveal transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Reveal"
        ],
        "summary": "Returns all available gravity reveal transactions",
        "operationId": "getAllReveal",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "RevealTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RevealTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/reveal/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact reveal by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Reveal"
        ],
        "operationId": "getExactReveal",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "RevealTransaction",
            "schema": {
              "$ref": "#/definitions/RevealTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/sign-new-consuls/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity sign-new-consuls transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "SignNewConsuls"
        ],
        "summary": "Returns all available gravity sign-new-consuls transactions",
        "operationId": "getAllSignNewConsuls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "SignNewConsulsTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignNewConsulsTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/sign-new-consuls/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact sign-new-consuls by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "SignNewConsuls"
        ],
        "operationId": "getExactSignNewConsuls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "SignNewConsulsTransaction",
            "schema": {
              "$ref": "#/definitions/SignNewConsulsTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/sign-new-oracles/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity sign-new-oracles transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "SignNewOracles"
        ],
        "summary": "Returns all available gravity sign-new-oracles transactions",
        "operationId": "getAllSignNewOracles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "SignNewOraclesTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignNewOraclesTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/sign-new-oracles/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact sign-new-oracles by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "SignNewOracles"
        ],
        "operationId": "getExactSignNewOracles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "SignNewOraclesTransaction",
            "schema": {
              "$ref": "#/definitions/SignNewOraclesTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/transactions/swap/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity swaps",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Swaps"
        ],
        "summary": "Returns all available gravity swaps",
        "operationId": "getAllSwaps",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Swap",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Swap"
              }
            }
          }
        }
      }
    },
    "/transactions/vote/all": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "This will show all available gravity vote transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Vote"
        ],
        "summary": "Returns all available gravity vote transactions",
        "operationId": "getAllVote",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Page",
            "description": "a CurrentPageParam represents current page\nOnly positive integers allowed. Default is 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Items",
            "description": "an ItemsPerPageParam represents items count per page\nOnly positive integers allowed. Default is 12",
            "name": "items",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "VoteTransaction",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VoteTransaction"
              }
            }
          }
        }
      }
    },
    "/transactions/vote/exact": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns exact vote by txId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Vote"
        ],
        "operationId": "getExactVote",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "a QueryParam acts like a search string for fields.\nUse as a regexp expression.",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "VoteTransaction",
            "schema": {
              "$ref": "#/definitions/VoteTransaction"
            }
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    }
  },
  "definitions": {
    "AddNebulaTransaction": {
      "type": "object",
      "properties": {
        "b": {
          "type": "string",
          "x-go-name": "B"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "AddOracleInNebulaTransaction": {
      "type": "object",
      "properties": {
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "oracle_pubkey": {
          "type": "string",
          "x-go-name": "OraclePubKey"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "AddOracleTransaction": {
      "type": "object",
      "properties": {
        "chain_type": {
          "type": "string",
          "x-go-name": "ChainType"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "oracle_pubkey": {
          "type": "string",
          "x-go-name": "OraclePubKey"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "ApproveLastRoundTransaction": {
      "type": "object",
      "properties": {
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "Asset": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "x-go-name": "Amount"
        },
        "decimals": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Decimals"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "CommitTransaction": {
      "type": "object",
      "properties": {
        "commit": {
          "type": "string",
          "x-go-name": "Commit"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "oracle_pubkey": {
          "type": "string",
          "x-go-name": "OraclePubKey"
        },
        "pulse_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PulseId"
        },
        "tc_height": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TcHeight"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "CommonStats": {
      "type": "object",
      "properties": {
        "data_feeds": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataFeeds"
        },
        "nodes_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "NodesCount"
        },
        "pulses": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Pulses"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "DropNebulaTransaction": {
      "type": "object",
      "properties": {
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "Extractor": {
      "type": "object",
      "required": [
        "datafeed_tag",
        "description"
      ],
      "properties": {
        "datafeed_tag": {
          "description": "Data feed tag for distinct usage",
          "type": "string",
          "x-go-name": "DataFeedTag"
        },
        "description": {
          "description": "Common extractor description",
          "type": "string",
          "x-go-name": "Description"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "Nebula": {
      "type": "object",
      "required": [
        "address",
        "name",
        "status",
        "description",
        "score",
        "target_chain",
        "regularity"
      ],
      "properties": {
        "address": {
          "description": "the address of the nebula SC",
          "type": "string",
          "x-go-name": "Address"
        },
        "description": {
          "description": "the description of the nebula",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "the name of the nebula",
          "type": "string",
          "x-go-name": "Name"
        },
        "nodes_using": {
          "description": "Actual pointers",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NodesUsing"
        },
        "regularity": {
          "description": "Data feed subscription charge regularity\nRepresents minutes. For i.g. 1440 - one day",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Regularity"
        },
        "score": {
          "description": "the score of the nebula",
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Score"
        },
        "status": {
          "description": "the status of the nebula",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Status"
        },
        "subscription_fee": {
          "type": "string",
          "x-go-name": "SubscriptionFee"
        },
        "target_chain": {
          "description": "the target chain of the nebula\nrecently allowed: WAVES, ETH",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TargetChain"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "NewRoundTransaction": {
      "type": "object",
      "properties": {
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "Node": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "the address of the node",
          "type": "string",
          "x-go-name": "Address"
        },
        "deposit_amount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DepositAmount"
        },
        "deposit_chain": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DepositChain"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "joined_at": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "JoinedAt"
        },
        "locked_until": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LockedUntil"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nebulas_using": {
          "description": "NebulasUsing []Nebula `json:\"nebulas_using\",pg:\"-\"`",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NebulasUsing"
        },
        "public_key": {
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "score": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Score"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "NodeContacts": {
      "type": "object",
      "properties": {
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "NodeHistoryRecord": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/Asset"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Status"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "NodeReward": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Amount"
        },
        "currency": {
          "type": "string",
          "x-go-name": "Currency"
        },
        "decimals": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Decimals"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "NodeSocials": {
      "type": "object",
      "properties": {
        "fb": {
          "type": "string",
          "x-go-name": "Facebook"
        },
        "linkedin": {
          "type": "string",
          "x-go-name": "Linked"
        },
        "tg": {
          "type": "string",
          "x-go-name": "Telegram"
        },
        "twitter": {
          "type": "string",
          "x-go-name": "Twitter"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "ResultTransaction": {
      "type": "object",
      "properties": {
        "chain_type": {
          "type": "string",
          "x-go-name": "ChainType"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "oracle_pubkey": {
          "type": "string",
          "x-go-name": "OraclePubKey"
        },
        "pulse_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PulseId"
        },
        "sign": {
          "type": "string",
          "x-go-name": "Sign"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "RevealTransaction": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "x-go-name": "Amount"
        },
        "commit": {
          "type": "string",
          "x-go-name": "Commit"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "oracle_pubkey": {
          "type": "string",
          "x-go-name": "OraclePubKey"
        },
        "pulse_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PulseId"
        },
        "receiver": {
          "type": "string",
          "x-go-name": "Receiver"
        },
        "rq": {
          "type": "string",
          "x-go-name": "Rq"
        },
        "tc_height": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TcHeight"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "SignNewConsulsTransaction": {
      "type": "object",
      "properties": {
        "chain_type": {
          "type": "string",
          "x-go-name": "ChainType"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RoundId"
        },
        "sign": {
          "type": "string",
          "x-go-name": "Sign"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "SignNewOraclesTransaction": {
      "type": "object",
      "properties": {
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RoundId"
        },
        "sign": {
          "type": "string",
          "x-go-name": "Sign"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "Swap": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "x-go-name": "Amount"
        },
        "commit": {
          "type": "string",
          "x-go-name": "Commit"
        },
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "func_type": {
          "type": "string",
          "x-go-name": "FuncType"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height"
        },
        "nebula_id": {
          "type": "string",
          "x-go-name": "NebulaId"
        },
        "oracle_pubkey": {
          "type": "string",
          "x-go-name": "OraclePubKey"
        },
        "pulse_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PulseId"
        },
        "receiver": {
          "type": "string",
          "x-go-name": "Receiver"
        },
        "rq": {
          "type": "string",
          "x-go-name": "Rq"
        },
        "tc_height": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TcHeight"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "tx_hash": {
          "type": "string",
          "x-go-name": "TxHash"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "func_type": {
          "type": "string",
          "x-go-name": "FuncType"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "tx_hash": {
          "type": "string",
          "x-go-name": "TxHash"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    },
    "VoteTransaction": {
      "type": "object",
      "properties": {
        "data_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DataId"
        },
        "tx_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TxId"
        }
      },
      "x-go-package": "github.com/Gravity-Tech/gravity-node-api/model"
    }
  },
  "responses": {
    "notFoundError": {
      "description": "A NotFoundError is the error message that is generated when server could not find what was requested.",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 404,
            "x-go-name": "Code",
            "example": 404
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "KEY",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}